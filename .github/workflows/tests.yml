name: Tests

on: [pull_request, push]

jobs:

  pytest:
    # Run the test suite.

    strategy:
      fail-fast: false
      matrix:
        name-prefix: ['']
        os: [ubuntu-latest]
        python: [3.12, 3.13-dev]

    name: ${{ format('{0}{1}', matrix.name-prefix, matrix.python) }}
    runs-on: ${{ matrix.os }}
    env:
      TERM: xterm-256color
        # This is needed to avoid a terminfo-related crash when
        # testing PyPy.
      PYTHONPATH: .

    steps:
    - run: git config --global core.autocrlf false
    - uses: actions/checkout@v4
    - if: ${{ matrix.python != 'pyodide' }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python }}
    - if: ${{ matrix.python == 'pyodide' }}
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
    - if: ${{ matrix.python == 'pyodide' }}
      uses: actions/setup-node@v4
    - name: Install
      shell: bash
      run: |
        if [[ ${{ matrix.python }} = pyodide ]] ; then
            pip install 'pydantic < 2'
              # https://github.com/pyodide/pyodide/pull/3971
            npm install pyodide
            pip install pyodide-build
            pyodide venv .venv-pyodide
            source .venv-pyodide/bin/activate
        fi
        pip install .
        rm -r hy
          # We want to be sure we're testing the installed version,
          # instead of running from the source tree.
        pip install pytest
    - name: Test
      shell: bash
      run: |
        if [[ ${{ matrix.python }} = pyodide ]] ; then
            source .venv-pyodide/bin/activate
        fi
        python -m pytest tests

  docs:
    # Try building the manual, ensuring that Sphinx doesn't produce
    # any warnings.

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Install
      run: |
        pip install .
        pip install -r requirements-dev.txt
    - run: sphinx-build -W -b html docs/ docs/_build/
